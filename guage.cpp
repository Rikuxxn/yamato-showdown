//=============================================================================
//
// ゲージ処理 [guage.cpp]
// Author : RIKU TANEKAWA
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "guage.h"
#include "manager.h"
#include "game.h"
#include "charactermanager.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CGuage::CGuage()
{
	// 値のクリア
	m_nIdxTexture = 0;			// テクスチャインデックス
	m_type = TYPE_NONE;			// ゲージの種類
	m_fWidth = 0.0f;			// 横幅
	m_fHeight = 0.0f;			// 縦幅
	m_targetRate = 0.0f;		// 実際のHP割合
	m_currentRate = 0.0f;		// 表示用ゲージ割合（追従用）
	m_speed = 0.0f;				// 追従速度
	m_delayTimer = 0;			// 遅延タイマー(バックゲージ用)
	m_pTargetChar = nullptr; // このゲージが追従するキャラクター
}
//=============================================================================
// コンストラクタ
//=============================================================================
CGuage::~CGuage()
{
	// なし
}
//=============================================================================
// 生成処理
//=============================================================================
CGuage* CGuage::Create(GUAGETYPE type, D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CGuage* pGuage = new CGuage;

	// 初期化処理
	pGuage->SetPos(pos);
	pGuage->SetSize(fWidth, fHeight);
	pGuage->m_type = type;
	pGuage->m_fWidth = fWidth;
	pGuage->m_fHeight = fHeight;

	if (type == TYPE_GUAGE)
	{// ゲージは緑
		pGuage->SetCol(D3DXCOLOR(0.0f, 1.0f, 0.0f, 1.0f));
	}
	else if (type == TYPE_BACKGUAGE)
	{// バックゲージは赤
		pGuage->SetCol(D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
	}
	else if (type == TYPE_FRAME)
	{// フレームはテクスチャの色を使うので白
		pGuage->SetCol(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));
	}

	pGuage->m_targetRate = 1.0f;
	pGuage->m_currentRate = 1.0f;
	pGuage->m_speed = 0.005f; // 追従速度

	// 初期化処理
	pGuage->Init();

	return pGuage;
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CGuage::Init(void)
{
	if (m_type == TYPE_FRAME)
	{
		// テクスチャ設定
		m_nIdxTexture = CManager::GetTexture()->RegisterDynamic("data/TEXTURE/HpFrame.png");
	}

	// 2Dオブジェクトの初期化処理
	CObject2D::Init();

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CGuage::Uninit(void)
{
	// 2Dオブジェクトの終了処理
	CObject2D::Uninit();
}
//=============================================================================
// 更新処理
//=============================================================================
void CGuage::Update(void)
{
	// 名前空間stdの使用
	using namespace std;

	if (m_type == TYPE_FRAME) 
	{
		UpdateFrame();
		return;
	}

	float fRate = m_pTargetChar->GetHp() / m_pTargetChar->GetMaxHp();
	fRate = max(0.0f, min(fRate, 1.0f));

	if (m_type == TYPE_GUAGE)
	{
		// 頂点座標を更新
		UpdateGuageVtx(fRate);
	}
	else if (m_type == TYPE_BACKGUAGE)
	{
		// 赤バックゲージは少し遅れて追従
		m_targetRate = fRate;

		if (m_currentRate > m_targetRate)
		{
			m_currentRate -= m_speed;

			if (m_currentRate < m_targetRate)
			{
				m_currentRate = m_targetRate;
			}
		}
		else if (m_currentRate < m_targetRate)
		{
			m_currentRate += m_speed;

			if (m_currentRate > m_targetRate)
			{
				m_currentRate = m_targetRate;
			}
		}

		// 頂点座標を更新
		UpdateGuageVtx(m_currentRate);
	}
}
//=============================================================================
// 描画処理
//=============================================================================
void CGuage::Draw(void)
{
	// テクスチャの取得
	CTexture* pTexture = CManager::GetTexture();

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	if (m_type == TYPE_FRAME)
	{
		// テクスチャの設定
		pDevice->SetTexture(0, pTexture->GetAddress(m_nIdxTexture));
	}
	else
	{// ゲージ自体には適用しない
		// テクスチャの設定
		pDevice->SetTexture(0, nullptr);
	}

	// 2Dオブジェクトの描画処理
	CObject2D::Draw();
}
