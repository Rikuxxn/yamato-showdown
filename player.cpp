//=============================================================================
//
// プレイヤー処理 [player.cpp]
// Author : RIKU TANEKAWA
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "player.h"
#include "texture.h"
#include "particle.h"
#include "guage.h"
#include "manager.h"

// 名前空間stdの使用
using namespace std;

//=============================================================================
// コンストラクタ
//=============================================================================
CPlayer::CPlayer()
{
	// 値のクリア
	memset(m_apModel, 0, sizeof(m_apModel));			// モデル(パーツ)へのポインタ
	m_mtxWorld			= {};							// ワールドマトリックス
	m_nNumModel			= 0;							// モデル(パーツ)の総数
	m_playerUse			= true;							// 使われているかどうか
	m_pShadowS			= nullptr;						// ステンシルシャドウへのポインタ
	m_pMotion			= nullptr;						// モーションへのポインタ
	m_bIsMoving			= false;						// 移動入力フラグ
	m_bOnGround			= false;						// 接地フラグ
	m_pDebug3D			= nullptr;						// 3Dデバッグ表示へのポインタ
	m_particleTimer		= 0;							// パーティクルタイマー
	m_pSwordModel		= nullptr;						// 武器モデルのポインタ
	m_pWeaponCollider	= nullptr;						// 武器の当たり判定へのポインタ
	m_pTipModel			= nullptr;						// 武器コライダー用モデル
	m_pBaseModel		= nullptr;						// 武器コライダー用モデル
}
//=============================================================================
// デストラクタ
//=============================================================================
CPlayer::~CPlayer()
{
	// なし
}
//=============================================================================
// 生成処理
//=============================================================================
CPlayer* CPlayer::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	CPlayer* pPlayer = new CPlayer;

	pPlayer->SetPos(pos);
	pPlayer->SetRot(D3DXToRadian(rot));

	// 初期化処理
	pPlayer->Init();

	return pPlayer;
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CPlayer::Init(void)
{
	CModel* pModels[MAX_PARTS];
	int nNumModels = 0;

	// パーツの読み込み
	m_pMotion = CMotion::Load("data/motion.txt", pModels, nNumModels, MAX);

	for (int nCnt = 0; nCnt < nNumModels && nCnt < MAX_PARTS; nCnt++)
	{
		m_apModel[nCnt] = pModels[nCnt];

		// オフセット考慮
		m_apModel[nCnt]->SetOffsetPos(m_apModel[nCnt]->GetPos());
		m_apModel[nCnt]->SetOffsetRot(m_apModel[nCnt]->GetRot());

		// 名前に weapon が含まれていたら武器パーツと認識
		if (strstr(m_apModel[nCnt]->GetPath(), "weapon") != nullptr)
		{
			m_pSwordModel = m_apModel[nCnt];
		}
	}

	// パーツ数を代入
	m_nNumModel = nNumModels;

	// 武器コライダーの生成
	m_pWeaponCollider = make_unique<CWeaponCollider>();

#ifdef _DEBUG
	// 武器コライダーモデルの生成
	m_pTipModel = CObjectX::Create("data/MODELS/weapon_collider.x", m_pWeaponCollider->GetCurrentTipPos(), INIT_VEC3, D3DXVECTOR3(1.0f, 1.0f, 1.0f));
	m_pBaseModel = CObjectX::Create("data/MODELS/weapon_collider.x", m_pWeaponCollider->GetCurrentBasePos(), INIT_VEC3, D3DXVECTOR3(1.0f, 1.0f, 1.0f));
#endif

	// プレイヤーが使われている
	m_playerUse = true;

	// 最初の向き
	SetRot(D3DXVECTOR3(0.0f, -D3DX_PI, 0.0f));

	// カプセルコライダーの設定
	CreatePhysics(CAPSULE_RADIUS, CAPSULE_HEIGHT);

	// ステンシルシャドウの生成
	m_pShadowS = CShadowS::Create("data/MODELS/stencilshadow.x",GetPos());
	m_pShadowS->SetStencilRef(1);// 個別のステンシルバッファの参照値を設定

	// インスタンスのポインタを渡す
	m_stateMachine.Start(this);

	// 初期状態のステートをセット
	m_stateMachine.ChangeState<CPlayer_StandState>();

	// HPの設定
	SetHp(10.0f);

	// ゲージを生成
	SetGuages(D3DXVECTOR3(100.0f, 800.0f, 0.0f), 420.0f, 20.0f);

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CPlayer::Uninit(void)
{
	ReleasePhysics();

	for (int nCnt = 0; nCnt < MAX_PARTS; nCnt++)
	{
		if (m_apModel[nCnt] != nullptr)
		{
			m_apModel[nCnt]->Uninit();
			delete m_apModel[nCnt];
			m_apModel[nCnt] = nullptr;
		}
	}

	if (m_pMotion != nullptr)
	{
		delete m_pMotion;
		m_pMotion = nullptr;
	}

	// オブジェクトの破棄(自分自身)
	this->Release();
}
//=============================================================================
// 更新処理
//=============================================================================
void CPlayer::Update(void)
{
	// カメラの取得
	CCamera* pCamera = CManager::GetCamera();

	// カメラの角度の取得
	D3DXVECTOR3 CamRot = pCamera->GetRot();

	// 接地判定
	m_bOnGround = OnGround(CManager::GetPhysicsWorld(), GetRigidBody(), 55.0f);

	// 武器コライダーの更新
	m_pWeaponCollider->Update(m_pSwordModel);

#ifdef _DEBUG
	CInputKeyboard* pKeyboard = CManager::GetInputKeyboard();

	if (pKeyboard->GetTrigger(DIK_1))
	{
		// ダメージ処理
		Damage(1.0f);
	}
	else if (pKeyboard->GetTrigger(DIK_2))
	{
		// 回復処理
		Heal(1.0f);
	}

	// 武器コライダー用モデルの位置更新
	m_pTipModel->SetPos(m_pWeaponCollider->GetCurrentTipPos());
	m_pBaseModel->SetPos(m_pWeaponCollider->GetCurrentBasePos());

#endif

	// ステートマシン更新
	m_stateMachine.Update();

	// 入力判定の取得
	InputData input = GatherInput();

	// 向きの更新処理
	UpdateRotation(0.09f);

	// 移動入力があればプレイヤー向きを入力方向に
	if (!m_pMotion->IsAttacking() && (input.moveDir.x != 0.0f || input.moveDir.z != 0.0f))
	{
		// Y成分だけを使いたいので目標の向きを取得
		D3DXVECTOR3 rotDest = GetRotDest();

		// Yを入力方向に向ける
		rotDest.y = atan2f(-input.moveDir.x, -input.moveDir.z);

		// 目標の向きに設定する
		SetRotDest(rotDest);
	}

	// コライダーの位置更新(オフセットを設定)
	UpdateCollider(D3DXVECTOR3(0, 35.0f, 0));// 足元に合わせる

	CModelEffect* pModelEffect = nullptr;

	//if (m_bIsMoving && m_bOnGround)
	//{
	//	m_particleTimer++;

	//	if (m_particleTimer >= DASH_PARTICLE_INTERVAL)
	//	{
	//		m_particleTimer = 0;

	//		// ランダムな角度で横に広がる
	//		float angle = ((rand() % 360) / 180.0f) * D3DX_PI;
	//		float speed = (rand() % 150) / 300.0f + 0.2f;

	//		// 移動量
	//		D3DXVECTOR3 move;
	//		move.x = cosf(angle) * speed;
	//		move.z = sinf(angle) * speed;
	//		move.y = (rand() % 80) / 50.0f + 0.05f; // 少しだけ上方向

	//		// 向き
	//		D3DXVECTOR3 rot;
	//		rot.x = ((rand() % 360) / 180.0f) * D3DX_PI;
	//		rot.y = ((rand() % 360) / 180.0f) * D3DX_PI;
	//		rot.z = ((rand() % 360) / 180.0f) * D3DX_PI;

	//		// モデルエフェクトの生成
	//		pModelEffect = CModelEffect::Create("data/MODELS/effectModel_step.x", GetPos(), rot,
	//			move, D3DXVECTOR3(0.3f, 0.3f, 0.3f), 180, 0.01f, 0.008f);
	//	}
	//}
	//else
	//{
	//	m_particleTimer = 0; // 停止時はリセット
	//}

	if (m_pShadowS != nullptr)
	{
		// ステンシルシャドウの位置設定
		m_pShadowS->SetPosition(GetPos());
	}

	// モーションの更新処理
	m_pMotion->Update(m_apModel, m_nNumModel);
}
//=============================================================================
// 描画処理
//=============================================================================
void CPlayer::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// 計算用マトリックス
	D3DXMATRIX mtxRot, mtxTrans, mtxSize;

	// ワールドマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxWorld);

	// サイズを反映
	D3DXMatrixScaling(&mtxSize, GetSize().x, GetSize().y, GetSize().z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxSize);

	// 向きを反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot, GetRot().y, GetRot().x, GetRot().z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxRot);

	// 位置を反映
	D3DXMatrixTranslation(&mtxTrans, GetPos().x, GetPos().y, GetPos().z);
	D3DXMatrixMultiply(&m_mtxWorld, &m_mtxWorld, &mtxTrans);

	// ワールドマトリックスを設定
	pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);

	for (int nCntMat = 0; nCntMat < m_nNumModel; nCntMat++)
	{
		// モデル(パーツ)の描画
		if (m_apModel[nCntMat])
		{
			m_apModel[nCntMat]->Draw();
		}
	}

#ifdef _DEBUG

	btRigidBody* pRigid = GetRigidBody();
	btCollisionShape* pShape = GetCollisionShape();

	// カプセルコライダーの描画
	if (pRigid && pShape)
	{
		btTransform transform;
		pRigid->getMotionState()->getWorldTransform(transform);

		m_pDebug3D->DrawCapsuleCollider((btCapsuleShape*)pShape, transform, D3DXCOLOR(1, 1, 1, 1));
	}

#endif

}
//=============================================================================
// レイによる接触判定
//=============================================================================
bool CPlayer::OnGround(btDiscreteDynamicsWorld* world, btRigidBody* playerBody, float rayLength)
{
	btTransform trans;
	playerBody->getMotionState()->getWorldTransform(trans);

	btVector3 start = trans.getOrigin();
	btVector3 end = start - btVector3(0, rayLength, 0);

	struct RayResultCallback : public btCollisionWorld::ClosestRayResultCallback
	{
		RayResultCallback(const btVector3& from, const btVector3& to)
			: btCollisionWorld::ClosestRayResultCallback(from, to) {}
	};

	RayResultCallback rayCallback(start, end);
	world->rayTest(start, end, rayCallback);

	if (rayCallback.hasHit())
	{// 接触
		// ヒットした面の法線
		btVector3 normal = rayCallback.m_hitNormalWorld.normalized();

		// 上方向ベクトル
		btVector3 up(0, 1, 0);

		// 法線と上方向の内積（= cosθ）
		float slopeDot = normal.dot(up);

		// cosθ が小さいほど急斜面
		// 50度までを地面として扱う
		float slopeLimit = cosf(D3DXToRadian(50.0f));

		if (slopeDot >= slopeLimit)
		{
			return true; // 接地
		}
		else
		{
			return false; // 急斜面なので接地扱いしない
		}
	}

	return false;
}
//=============================================================================
// プレイヤーの前方ベクトル取得
//=============================================================================
D3DXVECTOR3 CPlayer::GetForward(void)
{
	// プレイヤーの回転角度（Y軸）から前方ベクトルを計算
	float yaw = GetRot().y;

	D3DXVECTOR3 forward(-sinf(yaw), 0.0f, -cosf(yaw));

	// 正規化する
	D3DXVec3Normalize(&forward, &forward);

	return forward;
}
//=============================================================================
// プレイヤーの前方レイ判定処理
//=============================================================================
CBlock* CPlayer::FindFrontBlockByRaycast(float rayLength)
{
	btDiscreteDynamicsWorld* world = CManager::GetPhysicsWorld();

	if (!world)
	{
		return nullptr;
	}

	D3DXVECTOR3 from = GetPos() + D3DXVECTOR3(0.0f,20.0f,0.0f);
	D3DXVECTOR3 to = from + GetForward() * rayLength;

	btVector3 btFrom(from.x, from.y, from.z);
	btVector3 btTo(to.x, to.y, to.z);

	struct RayResultCallback : public btCollisionWorld::ClosestRayResultCallback
	{
		RayResultCallback(const btVector3& from, const btVector3& to)
			: btCollisionWorld::ClosestRayResultCallback(from, to) {}

		virtual btScalar addSingleResult(btCollisionWorld::LocalRayResult& rayResult, bool normalInWorldSpace)
		{
			// ブロック以外を無視する場合はここでフィルターしてもいい
			return ClosestRayResultCallback::addSingleResult(rayResult, normalInWorldSpace);
		}
	};

	RayResultCallback rayCallback(btFrom, btTo);
	world->rayTest(btFrom, btTo, rayCallback);

	if (rayCallback.hasHit())
	{
		void* userPtr = rayCallback.m_collisionObject->getUserPointer();

		if (userPtr)
		{
			CBlock* pBlock = static_cast<CBlock*>(userPtr);

			if (pBlock->IsDynamicBlock())
			{
				return pBlock; // 動的なブロックが前方にあった
			}
		}
	}

	return nullptr;
}
//=============================================================================
// 入力判定取得関数
//=============================================================================
InputData CPlayer::GatherInput(void)
{
	InputData input{};
	input.moveDir = D3DXVECTOR3(0, 0, 0);
	input.attack = false;

	CInputKeyboard* pKeyboard = CManager::GetInputKeyboard();	// キーボードの取得
	CInputMouse* pMouse = CManager::GetInputMouse();			// マウスの取得
	CInputJoypad* pJoypad = CManager::GetInputJoypad();			// ジョイパッドの取得
	XINPUT_STATE* pStick = CInputJoypad::GetStickAngle();		// スティックの取得
	CCamera* pCamera = CManager::GetCamera();					// カメラの取得
	D3DXVECTOR3 CamRot = pCamera->GetRot();						// カメラ角度の取得

	if (CGame::GetEnemy()->IsDead())
	{
		return input;
	}

	// ---------------------------
	// 攻撃入力
	// ---------------------------
	if (pMouse->GetTrigger(0) || pJoypad->GetTrigger(pJoypad->JOYKEY_X))
	{
		input.attack = true;
	}

	// ---------------------------
	// 攻撃中は移動入力無効化
	// ---------------------------
	if (m_pMotion->IsAttacking())
	{
		return input;
	}

	// ---------------------------
	// ゲームパッド入力
	// ---------------------------
	if (pJoypad->GetStick() && pStick)
	{
		float stickX = pStick->Gamepad.sThumbLX;
		float stickY = pStick->Gamepad.sThumbLY;
		float magnitude = sqrtf(stickX * stickX + stickY * stickY);
		const float DEADZONE = 10922.0f;

		if (magnitude >= DEADZONE)
		{
			stickX /= magnitude;
			stickY /= magnitude;
			float normMag = std::min((magnitude - DEADZONE) / (32767.0f - DEADZONE), 1.0f);
			stickX *= normMag;
			stickY *= normMag;

			D3DXVECTOR3 dir;
			float yaw = CamRot.y;

			dir.x = -(stickX * cosf(yaw) + stickY * sinf(yaw));
			dir.z = stickX * sinf(-yaw) + stickY * cosf(yaw);
			dir.z = -dir.z;

			input.moveDir += D3DXVECTOR3(dir.x, 0, dir.z);
		}
	}

	// ---------------------------
	// キーボード入力
	// ---------------------------
	if (pKeyboard->GetPress(DIK_W))
	{
		input.moveDir += D3DXVECTOR3(-sinf(CamRot.y), 0, -cosf(CamRot.y));
	}
	if (pKeyboard->GetPress(DIK_S))
	{
		input.moveDir += D3DXVECTOR3(sinf(CamRot.y), 0, cosf(CamRot.y));
	}
	if (pKeyboard->GetPress(DIK_A))
	{
		input.moveDir += D3DXVECTOR3(cosf(CamRot.y), 0, -sinf(CamRot.y));
	}
	if (pKeyboard->GetPress(DIK_D))
	{
		input.moveDir += D3DXVECTOR3(-cosf(CamRot.y), 0, sinf(CamRot.y));
	}

	// 正規化
	if (input.moveDir.x != 0.0f || input.moveDir.z != 0.0f)
	{
		D3DXVec3Normalize(&input.moveDir, &input.moveDir);
	}

	return input;
}

