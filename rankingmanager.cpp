//=============================================================================
//
// ランキングマネージャー処理 [rankingmanager.cpp]
// Author : RIKU TANEKAWA
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "rankingmanager.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
CRankingManager* CRankingManager::m_Instance = nullptr;

//=============================================================================
// コンストラクタ
//=============================================================================
CRankingManager::CRankingManager()
{
    // 初期ランキングを 99:59 で埋めておく
    m_rankList.resize(MAX_RANK);
    for (auto& r : m_rankList)
    {
        r.minutes = 99;
        r.seconds = 59;
    }

    // ランキングの読み込み
	Load();
}
//=============================================================================
// デストラクタ
//=============================================================================
CRankingManager::~CRankingManager()
{
	// なし
}
//=============================================================================
// 保存処理
//=============================================================================
void CRankingManager::Save(void)
{
    // ファイルを開く
    FILE* fp = fopen("data/ranking.txt", "w");

    if (!fp)
    {
        return;
    }

    for (auto& data : m_rankList)
    {
        fprintf(fp, "%d %d\n", data.minutes, data.seconds);
    }

    // ファイルを閉じる
    fclose(fp);
}
//=============================================================================
// 読み込み処理
//=============================================================================
void CRankingManager::Load(void)
{
    m_rankList.clear();

    // ファイルを開く
    FILE* fp = fopen("data/ranking.txt", "r");

    if (!fp)
    {
        return;
    }

    int min, sec;

    while (fscanf(fp, "%d %d", &min, &sec) == 2)
    {
        m_rankList.push_back({ min, sec });
    }

    // ファイルを閉じる
    fclose(fp);
}
